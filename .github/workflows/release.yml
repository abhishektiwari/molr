name: Build and Release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]
  workflow_run:
    workflows: ["Tests"]
    types:
      - completed
    branches: [ main ]

jobs:
  generate-version:
    runs-on: ubuntu-latest
    # Skip if Tests workflow failed
    if: ${{ github.event_name == 'pull_request' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      version: ${{ steps.generate_version.outputs.version }}
      version_tag: ${{ steps.generate_version.outputs.version_tag }}
      github_tag: ${{ steps.generate_version.outputs.github_tag }}
      is_prerelease: ${{ steps.generate_version.outputs.is_prerelease }}
      pr_number: ${{ github.event.number }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate version for PR
      if: github.event_name == 'pull_request'
      id: generate_pr_version
      run: |
        # Get base version from latest tag or default to 0.0.0
        BASE_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || true)
        if [ -z "$BASE_VERSION" ]; then
          BASE_VERSION="0.0.0"
        fi
        
        # Generate PEP 440 compatible pre-release version
        SHORT_SHA=$(git rev-parse --short HEAD)
        PR_NUMBER=${{ github.event.number }}
        
        # Use PEP 440 compatible format
        PRERELEASE_VERSION="${BASE_VERSION}.dev${PR_NUMBER}+${SHORT_SHA}"
        PRERELEASE_TAG="v${PRERELEASE_VERSION}"
        
        # GitHub tag for releases (without +sha)
        GITHUB_TAG="v${BASE_VERSION}-pr${PR_NUMBER}.${SHORT_SHA}"
        
        echo "version=$PRERELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "version_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
        echo "github_tag=$GITHUB_TAG" >> $GITHUB_OUTPUT
        echo "is_prerelease=true" >> $GITHUB_OUTPUT
    
    - name: Generate version for release
      if: github.event_name == 'workflow_run'
      id: generate_release_version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        minor_pattern: "(MINOR)"
        version_format: "${major}.${minor}.${patch}"
        bump_each_commit: true
    
    - name: Set outputs
      id: generate_version
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "version=${{ steps.generate_pr_version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "version_tag=${{ steps.generate_pr_version.outputs.version_tag }}" >> $GITHUB_OUTPUT
          echo "github_tag=${{ steps.generate_pr_version.outputs.github_tag }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "version=${{ steps.generate_release_version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "version_tag=${{ steps.generate_release_version.outputs.version_tag }}" >> $GITHUB_OUTPUT
          echo "github_tag=${{ steps.generate_release_version.outputs.version_tag }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

  build-python:
    needs: generate-version
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      attestations: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Set version for setuptools-scm
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        echo "About to create tag: ${{ needs.generate-version.outputs.version_tag }}"
        git tag -a "${{ needs.generate-version.outputs.version_tag }}" -m "Release ${{ needs.generate-version.outputs.version_tag }}"
        echo "Created tag: ${{ needs.generate-version.outputs.version_tag }}"
    
    - name: Build package
      run: make build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-artifacts
        path: dist/*
        retention-days: 30
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true
        skip-existing: true

  build-conda:
    needs: generate-version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Create version tag
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "${{ needs.generate-version.outputs.version_tag }}" -m "Release ${{ needs.generate-version.outputs.version_tag }}"
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        auto-activate-base: false
        python-version: 3.11
        channels: conda-forge,defaults
        channel-priority: true
    
    - name: Install conda-build and dependencies
      shell: bash -l {0}
      run: |
        conda install -y conda-build anaconda-client conda-verify
        conda config --set anaconda_upload no
    
    - name: Build conda package
      shell: bash -l {0}
      run: |
        export GIT_DESCRIBE_TAG=${{ needs.generate-version.outputs.version_tag }}
        echo "Building conda package with version: ${GIT_DESCRIBE_TAG}"
        conda build conda --output-folder conda-build-output
        
        echo "Built conda packages:"
        ls -la conda-build-output/noarch/
    
    - name: Upload to Anaconda Cloud
      if: needs.generate-version.outputs.is_prerelease == 'false'
      shell: bash -l {0}
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
      run: |
        PACKAGE_PATH=$(find conda-build-output -name "molr-*.tar.bz2" -o -name "molr-*.conda" | head -n 1)
        
        if [ -z "$PACKAGE_PATH" ]; then
          echo "Error: No package found!"
          exit 1
        fi
        
        echo "Uploading package: $PACKAGE_PATH"
        
        anaconda -t $ANACONDA_API_TOKEN upload \
          --user ${{ secrets.ANACONDA_ORG }} \
          --label main \
          $PACKAGE_PATH
    
    - name: Upload conda artifacts
      uses: actions/upload-artifact@v4
      with:
        name: conda-artifacts
        path: conda-build-output/noarch/molr-*.*
        retention-days: 30

  build-docs:
    needs: generate-version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Set version for setuptools-scm
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "${{ needs.generate-version.outputs.version_tag }}" -m "Release ${{ needs.generate-version.outputs.version_tag }}"
    
    - name: Build documentation
      run: make docs
    
    - name: Create documentation zip
      run: |
        cd docs/build
        zip -r ../../molr-docs-${{ needs.generate-version.outputs.version }}.zip html/
        cd ../..
        echo "Documentation archive created"
    
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: docs-artifacts
        path: molr-docs-${{ needs.generate-version.outputs.version }}.zip
        retention-days: 30

  create-release:
    needs: [generate-version, build-python, build-conda, build-docs]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Download Python artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-artifacts
        path: dist/
    
    - name: Download conda artifacts
      uses: actions/download-artifact@v4
      with:
        name: conda-artifacts
        path: dist/
    
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4
      with:
        name: docs-artifacts
        path: dist/
    
    - name: Create Linux binaries archive
      run: |
        cd dist
        # Create versioned zip of Linux binaries
        if [ -f "linux/molr-GUI" ] && [ -f "linux/molr" ]; then
          zip -j molr-linux-binaries-${{ needs.generate-version.outputs.version }}.zip linux/molr-GUI linux/molr
          echo "Created Linux binaries archive"
          # Remove the individual files since we have them in the zip
          rm -rf linux/
        fi
        cd ..
    
    - name: List all artifacts
      run: |
        echo "Contents of dist directory:"
        find dist -type f -ls
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: dist/**/*
        tag_name: ${{ needs.generate-version.outputs.github_tag }}
        name: ${{ needs.generate-version.outputs.is_prerelease == 'true' && 'Pre-release' || 'Release' }} ${{ needs.generate-version.outputs.github_tag }}
        body: |
          ${{ needs.generate-version.outputs.is_prerelease == 'true' && format('ðŸš§ **Pre-release build for PR #{0}**', needs.generate-version.outputs.pr_number) || 'ðŸŽ‰ **New Release**' }}
          
          ${{ needs.generate-version.outputs.is_prerelease == 'true' && 'This is an automated pre-release build. Use for testing purposes only.' || github.event.head_commit.message }}
          
          ## Available Downloads
          
          ### Python Package
          - Wheel: `molr-${{ needs.generate-version.outputs.version }}-py3-none-any.whl`
          - Source: `molr-${{ needs.generate-version.outputs.version }}.tar.gz`
          
          ### Conda Package
          - `molr-${{ needs.generate-version.outputs.version }}-py0.conda`
          
          ### Documentation
          - `molr-docs-${{ needs.generate-version.outputs.version }}.zip` - Full HTML documentation
          
          ## Installation
          
          **PIP:**
          ```bash
          pip install https://github.com/${{ github.repository }}/releases/download/${{ needs.generate-version.outputs.github_tag }}/molr-${{ needs.generate-version.outputs.version }}-py3-none-any.whl
          ```
          
          **PyPI:**
          ```bash
          pip install molr${{ needs.generate-version.outputs.is_prerelease == 'true' && '==' || '' }}${{ needs.generate-version.outputs.is_prerelease == 'true' && needs.generate-version.outputs.version || '' }}
          ```
          
          ${{ needs.generate-version.outputs.is_prerelease == 'false' && '**Conda:**
          ```bash
          conda install -c molr molr
          ```' || '**Conda:**
          Download the package and install locally' }}
        prerelease: ${{ needs.generate-version.outputs.is_prerelease == 'true' }}
        draft: false
    
    - name: Comment on PR
      if: needs.generate-version.outputs.is_prerelease == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ needs.generate-version.outputs.pr_number }};
          const tag = '${{ needs.generate-version.outputs.github_tag }}';
          const version = '${{ needs.generate-version.outputs.version }}';
          
          const comment = `## ðŸš§ Pre-release Ready
          
          A pre-release has been created for this PR: **${tag}**
          
          ### Quick Install
          
          **From PyPI (recommended):**
          \`\`\`bash
          pip install molr==${version}
          \`\`\`
          
          **From GitHub Release:**
          \`\`\`bash
          pip install https://github.com/${{ github.repository }}/releases/download/${tag}/molr-${version}-py3-none-any.whl
          \`\`\`
          
          ### Available Artifacts
          - **Python**: wheel and source distribution
          - **Conda**: conda package
          - **Documentation**: HTML documentation zip file
          
          View all artifacts at: https://github.com/${{ github.repository }}/releases/tag/${tag}
          `;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });